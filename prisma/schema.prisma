generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categories {
  id         String   @id @default(cuid())
  name       String?  @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  events     events[]
}

model channels {
  id          String          @id @default(cuid())
  user_id     String?         @db.VarChar(255)
  name        String?         @db.VarChar(255)
  description String?         @db.LongText
  image       String?         @db.VarChar(255)
  nik         String?         @db.VarChar(255)
  no_rek      String?         @db.VarChar(255)
  phone       String?         @db.VarChar(255)
  status      channels_status @default(UNVERIFIED)
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  users       users?          @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "channels_ibfk_1")
  events      events[]
  follows     follows[]

  @@index([user_id], map: "user_id")
}

model chats {
  id         String   @id @default(cuid())
  user_id    String?  @db.VarChar(255)
  message    String?  @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  event_id   String?  @db.VarChar(255)
  events     events?  @relation(fields: [event_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "chats_ibfk_1")
  users      users?   @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "chats_ibfk_2")

  @@index([event_id], map: "event_id")
  @@index([user_id], map: "user_id")
}

model events {
  id          String         @id @default(cuid())
  channel_id  String?        @db.VarChar(255)
  category_id String?        @db.VarChar(255)
  tag_id      String?        @db.VarChar(255)
  name        String?        @db.VarChar(255)
  description String?        @db.VarChar(255)
  image       String?        @db.VarChar(255)
  tf_image    String?        @db.VarChar(255)
  location    String?        @db.VarChar(255)
  is_paid     Boolean?
  price       Float?
  status      events_status?
  link_group  String         @db.VarChar(255)
  event_date  DateTime?      @db.DateTime(0)
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  chats       chats[]
  channels    channels?      @relation(fields: [channel_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "events_ibfk_1")
  categories  categories?    @relation(fields: [category_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "events_ibfk_2")
  tags        tags?          @relation(fields: [tag_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "events_ibfk_3")
  favorites   favorites[]
  user_events user_events[]

  @@index([category_id], map: "category_id")
  @@index([channel_id], map: "channel_id")
  @@index([tag_id], map: "tag_id")
}

model favorites {
  id         String   @id @default(cuid())
  user_id    String?  @db.VarChar(255)
  event_id   String?  @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users      users?   @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "favorites_ibfk_1")
  events     events?  @relation(fields: [event_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "favorites_ibfk_2")

  @@index([event_id], map: "event_id")
  @@index([user_id], map: "user_id")
}

model follows {
  id         String    @id @default(cuid())
  user_id    String?   @db.VarChar(255)
  channel_id String?   @db.VarChar(255)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "follows_ibfk_1")
  channels   channels? @relation(fields: [channel_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "follows_ibfk_2")

  @@index([channel_id], map: "channel_id")
  @@index([user_id], map: "user_id")
}

model tags {
  id         String   @id @default(cuid())
  name       String?  @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  events     events[]
}

model user_events {
  id         String   @id @default(cuid())
  user_id    String?  @db.VarChar(255)
  event_id   String?  @db.VarChar(255)
  tf_image   String?  @db.VarChar(255)
  status     Boolean?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users      users?   @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_events_ibfk_1")
  events     events?  @relation(fields: [event_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_events_ibfk_2")

  @@index([event_id], map: "event_id")
  @@index([user_id], map: "user_id")
}

model users {
  id          String        @id @default(cuid())
  name        String?       @db.VarChar(255)
  email       String?       @db.VarChar(255)
  image       String?       @db.VarChar(255)
  role        users_role?
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  channels    channels[]
  chats       chats[]
  favorites   favorites[]
  follows     follows[]
  user_events user_events[]
}

enum users_role {
  ADMIN
  USER
}

enum events_status {
  DONE
  PENDING
  ONGOING
}

enum channels_status {
  VERIFIED
  UNVERIFIED
}
